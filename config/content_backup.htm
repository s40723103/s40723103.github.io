<h1>介紹Github</h1>
<p>在深入了解python 的魅力所在後，相信你也會覺得程式很有趣。</p>
<p><img alt="" height="323" src="/images/pic-4.jpg" width="700"/></p>
<p>分別有三種狀態</p>
<p>1.<span style="color: #ff0000;">已提交</span>(commited)&gt;資料夾</p>
<p>2.<span style="color: #ff0000;">已修改</span>(modified)&gt;工作目錄(working directory)修改未儲存</p>
<p>3.<span style="color: #ff0000;">已預存</span>(staged)&gt;預存區(staging area)單一檔案(index)</p>
<p></p>
<p><span style="color: #ff0000;">*用來儲存專案的後設資料及物件資料庫的地方</span></p>
<p><span style="color: #000000;">流程</span></p>
<p><span style="color: #000000;"><span style="color: #ff0000;">1</span>.在工作目錄中修改檔案</span></p>
<p><span style="color: #000000;"><span style="color: #ff0000;">2</span>.預存檔案，檔案的快照新增到暫存區</span></p>
<p><span style="color: #000000;"><span style="color: #ff0000;">3</span>.提交，將檔案永久儲存在Git目錄中</span></p>
<p><span style="color: #ff0000;"> </span></p><h2>CMSimfly介紹</h2>
<p>在<span style="color: #ff0000;"><a href="https://github.com/chiamingyen/cmsimfly" style="color: #ff0000;">https://github.com/chiamingyen/cmsimfly</a></span>的倉儲中，可學習到運作模式與他的原理。</p>
<p>簡單來說。CMSimfly是在Python中缺一不可的重要角色之一。</p>
<p>所有運作皆需要用到<span>CMSimfly。</span></p>
<p><span>因此請好好摸索。</span></p>
<p>CMSimfly 的動態系統採用 <span style="color: #ff6600;">Python3 + Flask</span> 建構, 並且利用 <span style="color: #ff6600;">Beatifulsoup</span> 解讀位於 contig 目錄中的 content.htm 超文件檔案.</p>
<p>content.htm 檔案可以透過動態系統中的 generate_pages 功能, 將超文件轉為位於 content 目錄中的個別頁面檔案.</p>
<p>動態系統與靜態系統則共用 downloads, images, static 等目錄, 其中 downloads 目錄存放在動態系統上傳的文件檔, 而 images 目錄則存放動態系統所上傳的影像檔案, 包括 jpg, png 與 gif 等格式圖檔.</p>
<p>static 目錄則存放在動態與靜態系統所需要的 Javascript 或 Brython 程式檔.</p>
<h3>版本</h3>
<p>CMSimfly 目前使用 Syntaxhighlighter 3.0.83:</p>
<p> <a href="http://alexgorbatchev.com/SyntaxHighlighter/">http://alexgorbatchev.com/SyntaxHighlighter/</a> </p>
<p>進行頁面中的程式碼高亮顯示.</p>
<h2>Python簡介</h2>
<p><img alt="" height="300" src="/images/123.png" width="710"/></p>
<p><span style="color: #ff0000;">容易撰寫</span></p>
<p>Python 通常可以靠比較短的程式碼完成比較多的功能，或者可以寫得比較清楚。</p>
<p><span style="color: #ff0000;">功能強大</span></p>
<p>絕大部分都是開放原始碼的，與主要作業系統的支援功能等等，含括的範圍非常地廣泛。</p>
<p><span style="color: #ff0000;">跨平台</span></p>
<p>各種主要的作業系統都支援 Python。不需要修改。所撰寫的程式透過標準的模組進行包裝後，用標準的方式即可安裝於各種平台。</p>
<p><span style="color: #ff0000;">容易擴充</span></p>
<p>為執行效率不錯的直譯式語言。Python本身被設計為可擴充的。因此，有很多人把Python作為一種「膠水語言」（glue language）使用。使用Python將其他語言編寫的程式進行整合和封裝。</p>
<h2>術語解說</h2>
<p><span style="color: #ff0000;">編譯器</span></p>
<p>將程式碼編譯為機器碼，再加以執行，用編譯語言寫成的程式，在執行期的執行速度，通常比用直譯語言寫的程式快。因為程式在編譯期，已經被預先編譯成機器碼，可以直接執行。</p>
<p><span style="color: #ff0000;">直譯語言</span></p>
<p>直譯語言是一種程式語言，會將程式碼一句一句直接執行，不需要像編譯語言一樣，經過編譯器先行編譯為機器碼，之後再執行。</p>
<p><span style="color: #ff0000;">高階程式語言</span></p>
<p>是高度封裝了的程式語言。以人類的日常語言為基礎的一種程式語言，使用一般人易於接受的文字來表示，有較高的可讀性，以方便對電腦認知較淺的人亦可以大概明白其內容。</p>
<p><span style="color: #ff0000;">低階程式語言</span></p>
<p>為電腦科學相關的術語，指的是一類電腦程式語言。它很少提供或不提供電腦的指令集體系結構-&gt;也就是語言對映中與處理器指令緊密相關的命令或函式。</p>
<p> </p>
<p>.</p>
<p></p><h2>History of Python</h2>
<p>為廣泛使用的高階程式語言，由<span style="color: #ff6600;">吉多·范羅蘇姆</span>創造，作為一種<span style="color: #ff6600;">直譯語言</span>，設計哲學強調程式碼的可讀性和簡潔的語法，讓開發者能夠用更少的代碼表達想法，該語言都試圖讓程式的結構清晰明了。</p>
<p>從<span style="color: #ff6600;">ABC</span>發展而來的，雖然被粗略地分類為「指令碼語言」，但實際上一些大規模軟體開發計劃例如Zope、Mnet及BitTorrent，Google也廣泛地使用它。</p>
<p>Python的支持者較喜歡稱它為一種<span style="color: #ff6600;">高階動態程式語言</span>，<span style="color: #800080;">原因是「指令碼語言」泛指僅作簡單程式設計任務的語言。</span></p>
<p><span style="color: #800080;"><span>而正式直譯器CPython是用<span style="color: #ff6600;">C語言</span>編寫的、是一個由社群驅動的自由軟體。</span></span></p>
<p><span style="color: #ff6600;">支援多種編程範式</span>，包括物件導向、命令式、函數式和程序式編程，本身擁有一個巨大而廣泛的標準庫。</p>
<p> </p>
<p> </p>
<p></p>
<p></p>
<p></p><h1>基本設定操作</h1>
<p>主要複習上學期的教學課程內容與增加學期中所操作時的心得</p>
<p><a href="https://www.ithome.com.tw/news/95283">https://www.ithome.com.tw/news/95283</a></p>
<p>以上網址可較認識到GIT的操作與功用</p>
<p><img alt="" height="462" src="/images/101010.png" width="600"/></p><h2>創建Github帳號</h2>
<p><span><iframe allowfullscreen="allowfullscreen" height="360" src="//www.youtube.com/embed/gSUjyc3mQic" width="500"></iframe></span></p>
<p><span>1.</span><span style="color: #ff6600;">先到github之網站點選創建帳號</span></p>
<p><span><img alt="" height="282" src="/images/333.png" width="600"/></span></p>
<p>2.<span style="color: #ff6600;">之後會測試是否為機器人操作，下一階段為填寫為何需要github的表單，可選擇填寫(看個人)，填寫完畢即可直接進入github使用軟體。</span><br/><span></span></p>
<p><span><img alt="" height="282" src="/images/444.png" width="600"/></span></p>
<h2>設定Python和Proxy的代理主機</h2>
<p><span style="color: #333399;">開啟proxy伺服器設定，之後得知正確分享器以 DHCP client 取得 192.168.1.* 的網路位址，連接成功後開啟儲存，即可完成。</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="360" src="//www.youtube.com/embed/ALJxzCK9nVU" width="500"></iframe></p>
<p>1.<span style="color: #ff6600;">進入Proxy裡設定</span></p>
<p><img alt="" height="309" src="/images/666.png" width="600"/></p>
<p>2.<span style="color: #ff6600;">輸入伺服器網路位置</span></p>
<p><img alt="" height="573" src="/images/555.png" width="600"/></p>
<p>3.<span style="color: #ff6600;">儲存後重新連接即可獲取該伺服器之網路。</span></p>
<p><img alt="" height="710" src="/images/777.png" width="431"/></p><h2>進入倉儲之步驟</h2>
<p><iframe allowfullscreen="allowfullscreen" height="360" src="//www.youtube.com/embed/tJLm3IDbi54" width="500"></iframe></p>
<p><span>1</span><span>.<span style="color: #ff6600;">先複製倉儲之網址</span></span></p>
<p><span><img alt="" height="235" src="/images/121212.png" width="500"/></span></p>
<p><span>2.<span style="color: #ff6600;">之後git clone下來</span></span></p>
<p><span><span><img alt="" height="300" src="/images/131313.png" width="500"/></span></span></p>
<p><span><span>3.<span style="color: #ff6600;">下載完成後打開近端</span></span></span></p>
<p><span><span><span><img alt="" height="144" src="/images/141414.png" width="500"/></span></span></span></p>
<p><span><span><span>4.<span style="color: #ff6600;">複製網址後Login完即可對倉儲改版</span></span></span></span></p>
<p><span><span><span><span><img alt="" height="235" src="/images/151515.png" width="500"/></span></span></span></span></p>
<h2>更新倉儲改版</h2>
<p><iframe allowfullscreen="allowfullscreen" height="360" src="//www.youtube.com/embed/ale9u-cqaTo" width="500"></iframe></p>
<p>1.<span style="color: #ff9900;">先個別clone下來兩個需將合併的倉儲。</span></p>
<p><span style="color: #000000;">一.先下載新版倉儲資訊。</span></p>
<p><span style="color: #ff9900;"><img alt="" height="129" src="/images/151515.png" width="600"/></span></p>
<p>二.再下載自己的倉儲。</p>
<p><img alt="" height="131" src="/images/161616.png" width="600"/></p>
<p>2.<span style="color: #ff9900;">之後複製貼上需要更新的資料並蓋</span><span style="color: #ff9900;">過，即可完成。</span></p>
<p><span style="color: #ff9900;"><img alt="" height="285" src="/images/171717.png" width="600"/></span></p>
<p><span style="color: #ff0000;">*補</span>:<span style="color: #ff6600;">原本倉儲中config目錄不須被覆蓋，因為裡面的資料是在倉儲中所有變動的紀錄，假設被新版倉儲覆蓋將會遺失所有更改資料。</span></p><h2>找尋倉儲網址</h2>
<p>1.<span style="color: #ff6600;">在倉儲setting裡可更改。</span></p>
<p><img alt="" height="282" src="/images/chrome_2019-05-22_17-22-55.png" width="600"/></p>
<p>2.<span style="color: #ff6600;">之後變更完成即可找到倉儲網址。</span></p>
<p><img alt="" height="282" src="/images/chrome_2019-05-22_17-23-15.png" width="600"/></p><h1>程式操作運用</h1>
<p><img alt="" height="503" src="/images/111111.png" width="800"/></p>
<p><iframe allowfullscreen="allowfullscreen" height="360" src="//www.youtube.com/embed/srcm_CiWVtI" width="500"></iframe></p>
<p><span>1.</span><span style="color: #ff6600;">先到mde.tw之<a href="https://2019wcm.blogspot.com/" style="color: #ff6600;">網際內容管理網誌</a>點選<a href="https://drive.google.com/open?id=1_TQBw1PM7jxrmtsBjvLKbjJWfGs8Ug79" style="color: #ff6600;">20</a><a href="https://drive.google.com/open?id=1_TQBw1PM7jxrmtsBjvLKbjJWfGs8Ug79" style="color: #ff6600;">19_cdb_w5.7z</a> 下載</span></p>
<p><span><img alt="" height="282" src="/images/888.png" width="600"/></span></p>
<p>2.<span style="color: #ff6600;">開始練習指令</span></p>
<p><span><span style="color: #ff0000;">D:</span> <span> </span><span>去D槽之區域</span></span></p>
<p><span color="#000000"><span style="color: #ff0000;">cd </span><span> </span>進入資料夾</span></p>
<p><span style="color: #ff0000;">cd \   or cd .</span>返回根目錄</p>
<p><span style="color: #ff0000;">git init </span>增加數據庫</p>
<p><span style="color: #ff0000;">git clone</span>下載(後面需增加網址)</p>
<p><span style="color: #ff0000;">git add . </span><span> </span>快照，將工作區資料加入索引</p>
<p><span style="color: #ff0000;">git status</span>確認工作目錄與索引狀態</p>
<p><span style="color: #ff0000;">git pull</span>檢查近遠端是否連接</p>
<p><span style="color: #ff0000;">git commit -m "檔案名稱"</span>推送上去之前所包裝之資料夾</p>
<p><span color="#000000"><span style="color: #ff0000;">git push</span>推送(會問帳號密碼)</span></p>
<p><span color="#000000"><span style="color: #ff0000;">git branch</span>查看分支</span></p>
<p><span color="#000000"><span><span style="color: #ff0000;">git merge(分支名稱)</span> </span>將某分支合併到目前分支，有commit</span></p>
<p><span color="#000000"><span style="color: #ff0000;">git rebase(分支名稱) </span>將目前分支合併到某分支中，不會有commit</span></p>
<p><span color="#000000"><span style="color: #ff0000;">git  checkout</span><span> </span>將開端移動HEAD</span></p>
<p><span color="#000000"><span style="color: #ff0000;">git log</span>檢視提交紀錄</span></p>
<p><span color="#000000"><span style="color: #ff0000;">git log --oneline --graph --all</span>要求出現開頭的列表</span></p>
<p><span color="#000000"><span style="color: #ff0000;">git diff</span>查看上一個資料</span></p>
<p><span color="#000000"><span style="color: #ff0000;">git stash</span>移除上一個資料</span></p>
<p><span color="#000000"><span style="color: #ff0000;">python  --version</span>查看python之版本</span></p>
<p><span color="#000000"><span style="color: #ff0000;">git remote </span>顯示遠端儲存庫</span></p>
<p><span style="color: #ff0000;">git clean </span>刪除工作區中未被追蹤的文件</p><h2>各種程式範例</h2>
<h3>Java 程式碼</h3>
<pre class="brush:java;auto-links:false;toolbar:false" contenteditable="false">import java.util.Scanner;

public class Life {
    public static void show(boolean[][] grid){
        String s = "";
        for(boolean[] row : grid){
            for(boolean val : row)
                if(val)
                    s += "*";
                else
                    s += ".";
            s += "\n";
        }
        System.out.println(s);
    }
    
    public static boolean[][] gen(){
        boolean[][] grid = new boolean[10][10];
        for(int r = 0; r &lt; 10; r++)
            for(int c = 0; c &lt; 10; c++)
                if( Math.random() &gt; 0.7 )
                    grid[r][c] = true;
        return grid;
    }
    
    public static void main(String[] args){
        boolean[][] world = gen();
        show(world);
        System.out.println();
        world = nextGen(world);
        show(world);
        Scanner s = new Scanner(System.in);
        while(s.nextLine().length() == 0){
            System.out.println();
            world = nextGen(world);
            show(world);
            
        }
    }
    
    public static boolean[][] nextGen(boolean[][] world){
        boolean[][] newWorld 
            = new boolean[world.length][world[0].length];
        int num;
        for(int r = 0; r &lt; world.length; r++){
            for(int c = 0; c &lt; world[0].length; c++){
                num = numNeighbors(world, r, c);
                if( occupiedNext(num, world[r][c]) )
                    newWorld[r][c] = true;
            }
        }
        return newWorld;
    }
    
    public static boolean occupiedNext(int numNeighbors, boolean occupied){
        if( occupied &amp;&amp; (numNeighbors == 2 || numNeighbors == 3))
            return true;
        else if (!occupied &amp;&amp; numNeighbors == 3)
            return true;
        else
            return false;
    }

    private static int numNeighbors(boolean[][] world, int row, int col) {
        int num = world[row][col] ? -1 : 0;
        for(int r = row - 1; r &lt;= row + 1; r++)
            for(int c = col - 1; c &lt;= col + 1; c++)
                if( inbounds(world, r, c) &amp;&amp; world[r][c] )
                    num++;

        return num;
    }

    private static boolean inbounds(boolean[][] world, int r, int c) {
        return r &gt;= 0 &amp;&amp; r &lt; world.length &amp;&amp; c &gt;= 0 &amp;&amp;
        c &lt; world[0].length;
    }

}</pre>
<p></p><h3>Python 程式碼</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def parse_content():
    """use bs4 and re module functions to parse content.htm"""
    #from pybean import Store, SQLiteWriter
    # if no content.db, create database file with cms table
    '''
    if not os.path.isfile(config_dir+"content.db"):
        library = Store(SQLiteWriter(config_dir+"content.db", frozen=False))
        cms = library.new("cms")
        cms.follow = 0
        cms.title = "head 1"
        cms.content = "content 1"
        cms.memo = "first memo"
        library.save(cms)
        library.commit()
    '''
    # if no content.htm, generate a head 1 and content 1 file
    if not os.path.isfile(config_dir+"content.htm"):
        # create content.htm if there is no content.htm
        File = open(config_dir + "content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
    subject = file_get_contents(config_dir+"content.htm")
    # deal with content without content
    if subject == "":
        # create content.htm if there is no content.htm
        File = open(config_dir + "content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
        subject = "&lt;h1&gt;head 1&lt;/h1&gt;content 1"
    # initialize the return lists
    head_list = []
    level_list = []
    page_list = []
    # make the soup out of the html content
    soup = bs4.BeautifulSoup(subject, 'html.parser')
    # 嘗試解讀各種情況下的標題
    soup = _remove_h123_attrs(soup)
    # 改寫 content.htm 後重新取 subject
    with open(config_dir + "content.htm", "wb") as f:
        f.write(soup.encode("utf-8"))
    subject = file_get_contents(config_dir+"content.htm")
    # get all h1, h2, h3 tags into list
    htag= soup.find_all(['h1', 'h2', 'h3'])
    n = len(htag)
    # get the page content to split subject using each h tag
    temp_data = subject.split(str(htag[0]))
    if len(temp_data) &gt; 2:
        subject = str(htag[0]).join(temp_data[1:])
    else:
        subject = temp_data[1]
    if n &gt;1:
            # i from 1 to i-1
            for i in range(1, len(htag)):
                head_list.append(htag[i-1].text.strip())
                # use name attribute of h* tag to get h1, h2 or h3
                # the number of h1, h2 or h3 is the level of page menu
                level_list.append(htag[i-1].name[1])
                temp_data = subject.split(str(htag[i]))
                if len(temp_data) &gt; 2:
                    subject = str(htag[i]).join(temp_data[1:])
                else:
                    subject = temp_data[1]
                # cut the other page content out of htag from 1 to i-1
                cut = temp_data[0]
                # add the page content
                page_list.append(cut)
    # last i
    # add the last page title
    head_list.append(htag[n-1].text.strip())
    # add the last level
    level_list.append(htag[n-1].name[1])
    temp_data = subject.split(str(htag[n-1]))
    # the last subject
    subject = temp_data[0]
    # cut the last page content out
    cut = temp_data[0]
    # the last page content
    page_list.append(cut)
    return head_list, level_list, page_list

</pre>
<p></p><h3>C或C++程式碼</h3>
<p>請注意, 目前 CMSimfly 標題內文無法解讀 "/" 符號, 因此若本頁面的標題為  "C/C++程式碼", 則無法進行分頁.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Runge Kutta for a set of first order differential equations */
 
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
 
#define N 2 /* number of first order equations */
#define dist 0.1 /* stepsize in t*/
#define MAX 30.0 /* max for t */
 
FILE *output; /* internal filename */
FILE *output1; /* internal filename */
// 利用 pipe 呼叫 gnuplot 繪圖
FILE *pipe;
 
void runge4(double x, double y[], double step); /* Runge-Kutta function */
double f(double x, double y[], int i); /* function for derivatives */
 
void main(){
 
  double t, y[N];
  int j;
 
  output=fopen("osc.dat", "w"); /* external filename */
  output1=fopen("osc1.dat", "w"); /* external filename */
 
  y[0]=1.0; /* initial position */
  y[1]=0.0; /* initial velocity */
 
  //fprintf(output, "0\t%f\n", y[0]);
 
  for (j=1; j*dist&lt;=MAX ;j++) /* time loop */{
 
    t=j*dist;
    runge4(t, y, dist);
    fprintf(output, "%f\t%f\n", t, y[0]);
    fprintf(output1, "%f\t%f\n", t, y[1]);
  }
 
  fclose(output);
  fclose(output1);
 
  pipe = popen("gnuplot -persist","w");
  //fprintf(pipe,"set term png enhanced font \"v:/fireflysung.ttf\" 18 \n");
  fprintf(pipe,"set term png enhanced font \"y:/wqy-microhei.ttc\" 18 \n");
  //fprintf(pipe,"set yrange [68:70]\n");
  fprintf(pipe,"set output \"test.png\"\n");
  fprintf(pipe, "plot \"osc.dat\" title \"位移\" with lines, \"osc1.dat\" title \"速度\" with lines\n");
  fprintf(pipe,"quit\n");

  fprintf(pipe,"quit\n");
  pclose(pipe);
}
 
void runge4(double x, double y[], double step){
 
  double h=step/2.0, /* the midpoint */
  t1[N], t2[N], t3[N], /* temporary storage arrays */
  k1[N], k2[N], k3[N],k4[N]; /* for Runge-Kutta */
  int i;
 
  for (i=0;i&lt;N;i++){
 
    t1[i]=y[i]+0.5*(k1[i]=step*f(x,y,i));
  }
 
  for (i=0;i&lt;N;i++){
 
    t2[i]=y[i]+0.5*(k2[i]=step*f(x+h, t1, i));
  }
 
  for (i=0;i&lt;N;i++){
 
    t3[i]=y[i]+ (k3[i]=step*f(x+h, t2, i));
  }
 
  for (i=0;i&lt;N;i++){
 
    k4[i]= step*f(x+step, t3, i);
  }
 
  for (i=0;i&lt;N;i++){
 
    y[i]+=(k1[i]+2*k2[i]+2*k3[i]+k4[i])/6.0;
  }
}
 
double f(double x, double y[], int i){
 
  if (i==0)
    x=y[1]; /* derivative of first equation */
  if (i==1)
    x=-y[0]-0.5*y[1];
  return x;
}</pre>
<p></p><h3>Lua 程式碼</h3>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">-- 導入 js 模組
js = require("js")
-- 取得 window
window = js.global
-- 猜小於或等於 n 的整數
big = 100
-- 計算猜測次數, 配合 while 至少會猜一次
num = 1
-- 利用 window:prompt 方法回應取得使用者所猜的整數
guess = window:prompt("請猜一個介於 1 到 "..big.." 的整數")
-- 利用數學模組的 random 函數以亂數產生答案
answer = math.random(big)
output = ""
-- 若沒猜對, 一直猜到對為止
while answer ~= tonumber(guess) do
    if answer &gt; tonumber(guess) then
        output = "猜第 "..num.." 次, guess="..guess..", answer="..answer.." - too small"
        print(output)
    else
        output = "猜第 "..num.." 次, guess="..guess..", answer="..answer.." - too big"
        print(output)
    end 
    guess = window:prompt(output..", 請猜一個介於 1 到 "..big.." 的整數")
    num = num + 1
end
print("總共猜了 "..num.." 次, answer=guess="..answer.." - correct")
    </pre>
<p></p><h3>Javascript 程式碼</h3>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">STLViewer = function(stlpath, plotarea) {

	var mycanvas = document.getElementById(plotarea);
	var viewer = new JSC3D.Viewer(mycanvas)
	var theScene = new JSC3D.Scene;
	////Initialize with a default file:
	//var stlpath = "../../../assets/2013-10-23/stl/box.STL"
	//var stlpath = "../../../assets/2013-10-23/stl/taj.stl"
	viewer.setParameter('SceneUrl', stlpath);
    viewer.setParameter('InitRotationX', 20);
	viewer.setParameter('InitRotationY', 20);
	viewer.setParameter('InitRotationZ', 0);
	viewer.setParameter('ModelColor', '#CAA618');
	viewer.setParameter('BackgroundColor1', '#FFFFFF');
	viewer.setParameter('BackgroundColor2', '#383840');
	viewer.init();
	viewer.update();
	////init done
	var canvas_drop = document.getElementById('canvas-drop')
	/*var dropzone = document.getElementById('dropzone')
	dropzone.addEventListener('dragover', handleDragOver, false);
	dropzone.addEventListener('drop', handleFileSelect, false); */
	canvas_drop.addEventListener('dragover', handleDragOver, false);
	canvas_drop.addEventListener('drop', handleFileSelect, false);

////Drag and drop logic:
	function handleFileSelect(evt) {
	    evt.stopPropagation();
	    evt.preventDefault();
	    var files = evt.dataTransfer.files;
	    console.log(evt)
	    console.log(files)
	    preview_stl(files[0])
	  }

	  function handleDragOver(evt) {
	    evt.stopPropagation();
	    evt.preventDefault();
	    evt.dataTransfer.dropEffect = 'copy';
	  }

////jsc3d logic
	var handle_file_select = function(e) {
		e.stopPropagation()
		e.preventDefault()
		var f = e.target.files[0]
		preview_stl(f)
	}

	function preview_stl(f) {
		var reader = new FileReader()
		var ext = f.name.split(".")[1]

		function setup_viewer() {
			viewer.setParameter('InitRotationX', 20);
			viewer.setParameter('InitRotationY', 20);
			viewer.setParameter('InitRotationZ', 0);
			viewer.setParameter('ModelColor', '#CAA618');
			viewer.setParameter('BackgroundColor1', '#FFFFFF');
			viewer.setParameter('BackgroundColor2', '#383840');
			viewer.setParameter('RenderMode', "flat");
		}
		setup_viewer()

		reader.onload = (function(file) {
			return function(e) {
				theScene = new JSC3D.Scene
		    	stl_loader = new JSC3D.StlLoader()
		    	stl_loader.parseStl(theScene, e.target.result)
		      	//viewer.init()
		      	viewer.replaceScene(theScene)
		      	viewer.update()
		      	console.log("file reader onload")
			}
		})(f)

		if (ext.toLowerCase() != "stl") {
			alert("That doesn't appear to be an STL file.");
		} else {
			reader.readAsBinaryString(f)
		}
	}
}
</pre>
<p></p><h3>Html 原始碼</h3>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;html&gt;
   &lt;head&gt;
      &lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
      &lt;title&gt;CMSimfly&lt;/title&gt;
      &lt;link rel="stylesheet" type="text/css" href="/static/cmsimply.css"&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;div class='container'&gt;
      &lt;nav&gt;
         &lt;ul id='css3menu1' class='topmenu'&gt;
            &lt;li&gt;&lt;a href='/get_page/簡介'&gt;簡介&lt;/a&gt;
            &lt;li&gt;&lt;a href='/get_page/目錄結構'&gt;目錄結構&lt;/a&gt;
            &lt;li&gt;
               &lt;a href='/get_page/頁面編輯'&gt;頁面編輯&lt;/a&gt;
               &lt;ul&gt;
                  &lt;li&gt;
                     &lt;a href='/get_page/插入程式碼'&gt;插入程式碼&lt;/a&gt;
                     &lt;ul&gt;
                        &lt;li&gt;&lt;a href='/get_page/Java 程式碼'&gt;Java 程式碼&lt;/a&gt;
                        &lt;li&gt;&lt;a href='/get_page/Python 程式碼'&gt;Python 程式碼&lt;/a&gt;
                        &lt;li&gt;&lt;a href='/get_page/C或C++程式碼'&gt;C或C++程式碼&lt;/a&gt;
                        &lt;li&gt;&lt;a href='/get_page/Lua 程式碼'&gt;Lua 程式碼&lt;/a&gt;
                        &lt;li&gt;&lt;a href='/get_page/Javascript 程式碼'&gt;Javascript 程式碼&lt;/a&gt;
                        &lt;li&gt;&lt;a href='/get_page/Html 原始碼'&gt;Html 原始碼&lt;/a&gt;&lt;/li&gt;
                        &lt;/li&gt;
                     &lt;/ul&gt;
               &lt;/ul&gt;
            &lt;li&gt;&lt;a href='/get_page/網際簡報'&gt;網際簡報&lt;/a&gt;
            &lt;li&gt;&lt;a href='/get_page/網誌編輯'&gt;網誌編輯&lt;/a&gt;
            &lt;li&gt;&lt;a href='/get_page/已知錯誤'&gt;已知錯誤&lt;/a&gt;&lt;/li&gt;
         &lt;/ul&gt;
      &lt;/nav&gt;
      &lt;section&gt;
         &lt;form method='post' action='/ssavePage'&gt;
         &lt;textarea class='simply-editor' name='page_content' cols='50' rows='15'&gt;&lt;h3&gt;Html 原始碼&lt;/h3&gt;&lt;/textarea&gt;
         &lt;input type='hidden' name='page_order' value='9'&gt;
         &lt;input type='submit' value='save'&gt;
         &lt;input type=button onClick="location.href='/get_page/Html 原始碼'" value='viewpage'&gt;
         &lt;/form&gt;
      &lt;/section&gt;
   &lt;/body&gt;
&lt;/html&gt;
COPY TO CLIPBOARD	</pre>
<p></p><h1>修正錯誤</h1>
<p><br/><br/><img alt="" height="364" src="/images/999.png" width="599"/></p>
<p><b>期中問題</b></p>
<p><b>1.</b><span style="color: #ff6600;"><b>單機與網路差別</b></span></p>
<p>   單機之資料庫只供本機使用，網路之資料庫為透過區域網路設定可供多人共用。</p>
<p><b>2</b><b>.</b><span style="color: #ff6600;"><b>為什麼協同反而無法取得正確近端</b></span></p>
<p> 因為協同後，需要pull request才能真正取得倉儲之近端，在指令馬中打git pull，即可將近端</p>
<p> 遠端統合， 便可把資料push上去。</p>
<p><b>3.</b><span style="color: #ff6600;"><b>兩個人同時</b><b>用近端</b><b>並同時上傳檔案，但有合併衝突怎麼辦</b></span></p>
<p> 先將.htm檔拖曳到SciTE文字編輯器，找出衝突點，並刪除頭(&lt;&lt;&lt;&lt;&lt;&lt;&lt;)尾(&gt;&gt;&gt;&gt;&gt;&gt;&gt;)與接 合處 (=======)後，儲存並重新進入近端，將之轉成Generapage，最後git add .  gitcommit</p>
<p>   git push。</p>
<p><b>4</b><b>.</b><span style="color: #ff6600;"><b>為什麼倉儲會突然找不到網頁，但在遠端還可以看到</b></span></p>
<p>有可能是因為檔案中又包住另一個git clone 下來的資料，造成程式碼衝突，因而，使得變成404網頁。</p>
<p><span style="color: #ff0000;"> * 處理方式:建議不要將檔案連續包夾在同一個資料夾裡面。</span></p>
<p><b>5.</b><span style="color: #ff6600;"><b>為什麼更改字型但是網頁爆掉</b></span></p>
<p>由於前後自行更改大小不一，因而造成網頁爆掉，需要到SciTE去刪除設定大小的前後(head3)</p>
<p>即可救回網頁。 P.S.建議不要隨便更改字型大小。</p>
<p><b>6.</b><span style="color: #ff6600;"><b>網頁爆掉如何救回</b></span></p>
<p>檢視問題點在哪行程式碼，將之移除，並重新檢視、送出，以下為指令:</p>
<p><span style="color: #ff0000;">Git log</span>(查看從最近到最遠得提交日誌)</p>
<p><span style="color: #ff0000;">Git checkout 7碼</span>(丟棄工作區文檔的修改)</p>
<p><span style="color: #ff0000;">Git status</span>(查看當前git倉儲狀態)</p>
<p><span style="color: #ff0000;">Git diff</span> (查看修改的文檔內容)</p>
<p><span style="color: #ff0000;">Git status</span>(查看當前git倉儲狀態)</p>
<p><span style="color: #ff0000;">Git stash</span>(將寫到一半的代碼從工作區拿走存起來)</p>
<p><span style="color: #ff0000;">Git status</span>(查看當前git倉儲狀態)</p>
<p>期末問題</p>
<p>1.<span style="color: #ff6600;">新版與舊版倉儲產生倉儲</span></p>
<p>將舊版倉儲一律改版成新版，在原先舊版資料檔中保存config目錄，之後將新版倉儲資料複製撇除git檔全部覆蓋後，重新進入近端推送變更資料後即可解決衝突問題。</p>
<p><span style="color: #ff0000;">補:假如沒有去做更新改版的動作，可能會導致資料推送不完整或是push不上去的問題。</span></p>
<p><span style="color: #ff0000;">可參考以下影片操作</span></p>
<p><span style="color: #ff0000;"><iframe allowfullscreen="allowfullscreen" height="360" src="//www.youtube.com/embed/ale9u-cqaTo" width="600"></iframe></span></p>
<p>2.<span style="color: #ff6600;">資料推送不上去</span></p>
<p><span style="color: #ff6600;"><iframe allowfullscreen="allowfullscreen" height="360" src="//www.youtube.com/embed/WsSrPQftyN8" width="600"></iframe></span></p>
<p>可參考以下應片來解決，最有影響的部分可能在於近端遠端沒有做統一彙整成一樣的，導致資訊核對時產生錯誤，應使用git pull解決，之後再確認其他部分是否成立，並commit，即可解決此問題。</p>
<p><img alt="" height="178" src="/images/191919.png" width="600"/></p>
<p>(圖為push產生問題範例)</p>
<p>3.<span style="color: #ff6600;">組別倉儲在推送後其他組員也剛好在改版，因而產生版面衝突</span></p>
<p>在新版推送完畢後，組員使用舊版要推送之時產生衝突，會有一些指示建議你，大概會使用到....</p>
<p><span style="color: #ff6600;"><span style="color: #000000;">git pull</span></span></p>
<p><span style="color: #ff6600;"><span style="color: #000000;">git commit</span></span></p>
<p><span style="color: #ff6600;"><span style="color: #000000;">git status</span></span></p>
<p><span style="color: #ff6600;"><span style="color: #000000;">git add .</span></span></p>
<p><span style="color: #ff6600;"><span style="color: #000000;">git merge</span></span></p>
<p><span style="color: #ff6600;"><span style="color: #000000;">這些指令會一直無限循環到推送完成。</span></span></p>
<p><span style="color: #ff6600;"><span style="color: #000000;"><img alt="" height="282" src="/images/181818.png" width="600"/></span></span></p>
<p>將.htm檔拖曳到SciTE文字編輯器，找出衝突點，並刪除頭(&lt;&lt;&lt;&lt;&lt;&lt;&lt;)尾(&gt;&gt;&gt;&gt;&gt;&gt;&gt;)與接 合處 (=======)後儲存，<span style="color: #ff6600;"><span style="color: #000000;">之後再次確認是否改版，進入近端查看發現會有一些地方重複而產生錯誤版面，去編輯將重複的資訊刪除再重新推送，即可完成最新版的倉儲。</span></span></p>
<p><span style="color: #ff6600;"><span style="color: #000000;">4.<span style="color: #ff6600;">資料上傳不上去導至網頁錯誤的原因</span></span></span></p>
<p>Y:\&gt;cd project</p>
<p>Y:\project&gt;dir</p>
<p>Y:\project&gt;cd cmstest&gt;更換目錄到contest</p>
<p><span data-blogger-escaped-style="background-color: white;">Y:\project\cmstest&gt;python wsgi.py</span></p>
<p><span data-blogger-escaped-style="background-color: white;">進入address可改版，一˙但改版可進行版次推送</span></p>
<p><span data-blogger-escaped-style="background-color: white;"><br/></span><span data-blogger-escaped-style="background-color: white;">Login完week2打入根據[...網址...]完成ungit的配置，按github page，回到ungit網頁，push上去。</span></p>
<p><span data-blogger-escaped-style="background-color: white;"><br/></span><span data-blogger-escaped-style="background-color: white;">假如網頁出現錯誤:</span></p>
<p><span data-blogger-escaped-style="background-color: white;"><br/></span><span data-blogger-escaped-style="background-color: white;"><br/></span><span data-blogger-escaped-style="background-color: white;">由於沒有在Home底下有對應的git config</span></p>
<p><span data-blogger-escaped-style="background-color: white;">Home(外部)    Home_cadlab(內部)</span></p>
<p><span data-blogger-escaped-style="background-color: white;">先檢查有無gitconfig!</span></p><h1>進階挑戰</h1>
<p>挑戰更加困難也繁瑣的操作.</p>
<p><img alt="" height="400" src="/images/.pic-36.jpg" width="652"/></p>
<p>.</p><h2>設定路徑說明</h2>
<h4><span style="color: #ff6600;">導入ungit</span></h4>
<p><span data-blogger-escaped-style="background-color: white;">nodejs裡面有ungit-&gt;程式為nodejs所寫，nodejs位置在</span><span data-blogger-escaped-style="background-color: #fff2cc;">appdata-&gt;roming-&gt;npm-&gt;ungi</span><span data-blogger-escaped-style="background-color: white;"> 。</span></p>
<p><span data-blogger-escaped-style="background-color: white;">程式碼在appdata-&gt;roming-&gt;npm-&gt;node-modules-&gt;ungit-&gt;CHANGELOG.md。</span></p>
<p><b data-blogger-escaped-style="background-color: #ea9999;"> </b></p>
<h4><span style="color: #ff6600;"><b data-blogger-escaped-style="background-color: #d9ead3;">start.bat跟start.cadlab.bat差別</b></span></h4>
<p><span data-blogger-escaped-style="background-color: white;" style="color: #ff0000;">因Home位置不同，適用範圍有所不同!!</span></p>
<p><span data-blogger-escaped-style="background-color: white;" style="color: #ff0000;">start.bat=&gt;學校外適用。</span></p>
<p><span data-blogger-escaped-style="background-color: white;" style="color: #ff0000;">start.cadlab.bat=&gt;學校內適用，不能使用在學校外的地方。</span></p>
<p></p>
<h4><span data-blogger-escaped-style="background-color: #d9ead3;" style="color: #ff6600;">STAPE1</span></h4>
<p></p>
<p><span data-blogger-escaped-style="background-color: white;"><span style="color: #ff0000;">1</span>.設定路徑=&gt;</span></p>
<p><span data-blogger-escaped-style="background-color: white;">    set path8=%Disk%:\nodejs;%Disk%:\nodejs\appdata\roaming\npm;放置到start.cadlab的sciTE裡      的path7後。</span></p>
<div>
<p><span data-blogger-escaped-style="background-color: white;"><br/></span><span data-blogger-escaped-style="background-color: white;"><span style="color: #ff0000;">2</span>.將 path8 納入 path 設定=&gt;</span></p>
<p><span data-blogger-escaped-style="background-color: white;">    %path8%；-&gt;讓nodejs.ungit直行即可使用。</span></p>
<div>
<p><span data-blogger-escaped-style="background-color: white;">    在同上步驟中的sciTE中有path程式碼將%path8%；直接放在最後方。</span></p>
</div>
<div>
<p><span data-blogger-escaped-style="background-color: white;"> </span></p>
</div>
<div>
<p><span data-blogger-escaped-style="background-color: white;"><span style="color: #ff0000;">3</span>.分別start.bat跟start.cadlab.bat都如上兩步驟操作並儲存。</span></p>
</div>
<div>
<p><span data-blogger-escaped-style="background-color: white;"> </span></p>
</div>
<div>
<p><span data-blogger-escaped-style="background-color: white;"><span style="color: #ff0000;">4</span>.按start.cadlab.bat打入ungit可作執行，之後出現頁面表示設定成功，按允許儲存，再將跳出        的網頁關掉。</span></p>
</div>
<div>
<p><span data-blogger-escaped-style="background-color: white;"> </span></p>
</div>
<div>
<p><span data-blogger-escaped-style="background-color: white;"><span style="color: #ff0000;">5</span>.針對nodejs設定路徑=&gt;</span></p>
</div>
<div data-blogger-escaped-style="text-align: left;">
<p><span data-blogger-escaped-style="background-color: white;">    [set. USERPROFILE=%Disk%:\home]start.cadlab.bat中需加入以上程式碼                在 set.HOME=%Disk%:\home-cadlab之下方增加。</span></p>
</div>
<div data-blogger-escaped-style="text-align: left;">
<p><span data-blogger-escaped-style="background-color: white;">  *將以上程式關掉(剛才使用的程式碼還不用關。若關掉，kmol-2019-&gt;data-&gt;scite-&gt;bin-&gt;按          scite黑色圓點。</span></p>
</div>
<div data-blogger-escaped-style="text-align: left;">
<p><span data-blogger-escaped-style="background-color: white;">以便能作動，因nodejs系統user的路徑找git的設定檔，但找不到，又因為需變為可攜程式，必須透過上述方式來作動!!</span></p>
</div>
<div data-blogger-escaped-style="text-align: left;">
<p><span data-blogger-escaped-style="background-color: white;"><span style="color: #ff0000;">6</span>.start.bat也是上述步驟重複一遍。完成初步動作。。。。。</span></p>
</div>
<h4><span data-blogger-escaped-style="background-color: #d9ead3;" style="color: #ff6600;">STAPE2</span></h4>
<div>
<p><span data-blogger-escaped-style="background-color: white;">可在mde.tw中2019 spring...裡，實習任務之任務2有明確步驟可找到下面的程式。</span></p>
</div>
<div>
<p><span data-blogger-escaped-style="background-color: white;">ungit --launchBrowser=0 --launchCommand "C:\PROGRA~2\Google\Chrome\Application\chrome.exe  %U"</span></p>
</div>
<div>
<p><span data-blogger-escaped-style="background-color: white;">需使用簡寫，不然無法啟動。並新建批次檔。</span></p>
<h2>新建批次檔步驟</h2>
<p>Q<span style="color: #ff6600;">如何建立批次檔</span>?</p>
<p></p>
<p><span style="color: #ff6600;">Step1</span>；去SciTe新建檔案&gt;將程式複製貼上 &gt;Save as 在隨身碟Y槽</p>
<p>     </p>
<p>             [為了與ungit作區別，因此將其名稱為kungit.bat]&gt;從可攜home找出對應的git</p>
<p>              設定</p>
<p></p>
<p><span style="color: #ff6600;">Step2</span>:去隨身碟Y槽&gt;home&gt;查看有無git設定&gt;沒有的話測試程式碼能否運作&gt;git clone測試網頁</p>
<p></p>
<p>打開ungit在CMS下面的各時間提交之內容&gt;[進入測試網頁&gt;打kungit指令]</p>
<p>       </p>
<p>           <span style="color: #ff0000;">條件</span>:  1.必須在某個git倉儲下指令(cd....)&gt;目的為由Chrom開啟</p>
<p></p>
<p>                      2.必須啟動ungit對應的的\批次檔。</p>
<p>             為了確保關閉nodejs不干擾運作，下載process explorer ，取64....的Z複製下來，貼在y槽以便隨時關閉程式。</p>
<p>找到在最下面的綠色node按右鍵kill process&gt;把nodejs上次對應的8443的批次檔關閉，指令便可正常運作。(即可不會抱怨。)</p>
<p>刪除nodejs之8443的批號後，重新打入kungit指令即可看到ungit網頁跳出。</p>
<h2>Virtualbox下載步驟</h2>
<p>1.搜尋Virtualbox[關鍵字，點進去會是這個畫面</p>
<p><img alt="" height="263" src="/images/323232.png" width="600"/></p>
<p>2.之後點入Download <span>Virtualbox6.的綠色大框，出現畫面點選紅框內的下載連結</span></p>
<p><span><img alt="" height="276" src="/images/323232-1.png" width="600"/></span></p>
<p><span>3.下載好後開啟Virtualbox</span></p>
<p><span><img alt="" height="372" src="/images/40.png" width="600"/></span></p>
<p><span><img alt="" height="483" src="/images/35.png" width="618"/></span></p>
<p><span>                                                                                                                      (圖例)</span></p>
<p><span>4.點選下一步，選取放置位置</span></p>
<p><span><img alt="" height="483" src="/images/36.png" width="618"/></span></p>
<p><span>5點選下一步，選取以下選項</span></p>
<p><span><img alt="" height="483" src="/images/37.png" width="618"/></span></p>
<p><span>6.點選下一步來到安裝頁面</span></p>
<p><span><img alt="" height="483" src="/images/38.png" width="618"/></span></p>
<p><span>開始安裝畫面出現</span></p>
<p><span><img alt="" height="483" src="/images/39.png" width="618"/></span></p>
<p><span>7.完成安裝 </span></p>
<p><span></span></p><h2>VirtualBox操作步驟</h2>
<p><iframe allowfullscreen="allowfullscreen" height="360" src="//www.youtube.com/embed/aDRXxs25UYM" width="600"></iframe></p>
<p><span>1.</span><span>先下載軟件安裝</span></p>
<p><span><img alt="" height="322" src="/images/202020.png" width="600"/></span></p>
<p><span>2.<span>開始設定軟件驅動路徑</span></span></p>
<p><span><span><img alt="" height="316" src="/images/212121.png" width="600"/></span></span></p>
<p><span><span>3.<span>之後開啟虛擬主機，嘗試打開網頁，如打不開網頁可嘗試下列步驟解決</span></span></span></p>
<p><span><span><span><img alt="" height="487" src="/images/222222.png" width="600"/></span></span></span></p>
<p>帳號密碼kmol2019</p>
<p>ifconfig</p>
<p>cd/etc/netplan</p>
<p>is -1</p>
<p>sudo vi 50-cloud-init.yuml  按enter</p>
<p>kmol2019</p>
<p>進入編輯模式，將True變更為False</p>
<p>不是DHCP  </p>
<p>設定addresses</p>
<p>啟動-192.168.56.2/24</p>
<p>要有gateway4:192.168.56.1</p>
<p>可重新讀取</p>
<p>跳出編輯模式，按下esc     :wq</p>
<p>sudo netplan apply</p>
<p>ifconfig</p>
<p>假如還是開不了網頁，回到根目錄cd</p>
<p>回到編輯模式查看是否設定錯誤，cd uwsgi-ini</p>
<p>                                                                              is -1</p>
<p>                                                                             sudo vi uwsgi.ini </p>
<p>源成設定後，即可開啟網頁。</p>
<p><img alt="" height="361" src="/images/232323.png" width="600"/></p>
<p>分別有兩個網頁需開啟</p>
<p><img alt="" height="361" src="/images/242424.png" width="600"/></p>
<div>
<p><span data-blogger-escaped-style="background-color: white;"></span></p>
<p></p>
<p>         </p>
<p>         </p>
</div>
<p></p><h1>已知要點</h1>
<p>1.<span style="color: #ff0000;">設計意圖</span></p>
<p>2.<span style="color: #ff6600;">設定尺寸or約束</span></p>
<p>3.<span style="color: #ff9900;">自動推理</span></p>
<p>4.<span style="color: #008000;">繪製精確零件</span></p>
<p>5.<span style="color: #0000ff;">草圖練習</span></p>
<p>6.<span style="color: #800080;">運用and建立評面</span></p>
<p>7.<span style="color: #993366;">建立援剿or倒角</span></p>
<p>8.<span style="color: #ff0000;">使用多個草圖區域</span></p>
<p>9.<span style="color: #ff6600;">基本零件</span></p>
<p>10.<span style="color: #ff9900;">繪製模型&gt;用於設計意圖</span></p>
<p>11.<span style="color: #339966;">各種簡單的幾何形狀</span></p>
<h2>解釋術語</h2>
<h4></h4></div></div>